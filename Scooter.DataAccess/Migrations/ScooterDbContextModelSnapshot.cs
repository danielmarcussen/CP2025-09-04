// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScooterApp.DataAccess;

#nullable disable

namespace ScooterApp.DataAccess.Migrations
{
    [DbContext(typeof(ScooterDbContext))]
    partial class ScooterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ScooterApp.Domain.Model.LocationEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ScooterId")
                        .HasColumnType("integer")
                        .HasColumnName("scooterid");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.Property<double>("XCoordinate")
                        .HasColumnType("double precision")
                        .HasColumnName("xcoordinate");

                    b.Property<double>("YCoordinate")
                        .HasColumnType("double precision")
                        .HasColumnName("ycoordinate");

                    b.HasKey("Id")
                        .HasName("pk_locationevent");

                    b.HasIndex("ScooterId")
                        .HasDatabaseName("ix_locationevent_scooterid");

                    b.ToTable("locationevent", (string)null);
                });

            modelBuilder.Entity("ScooterApp.Domain.Model.Scooter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BatteryCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("batterycapacity");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("brand");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_scooter");

                    b.ToTable("scooter", (string)null);
                });

            modelBuilder.Entity("ScooterApp.Domain.Model.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("CostNOK")
                        .HasColumnType("double precision")
                        .HasColumnName("costnok");

                    b.Property<double>("DistanceKm")
                        .HasColumnType("double precision")
                        .HasColumnName("distancekm");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("endtime");

                    b.Property<int>("ScooterId")
                        .HasColumnType("integer")
                        .HasColumnName("scooterid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starttime");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_trip");

                    b.HasIndex("ScooterId")
                        .HasDatabaseName("ix_trip_scooterid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_trip_userid");

                    b.ToTable("trip", (string)null);
                });

            modelBuilder.Entity("ScooterApp.Domain.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("ScooterApp.Domain.Model.LocationEvent", b =>
                {
                    b.HasOne("ScooterApp.Domain.Model.Scooter", "Scooter")
                        .WithMany()
                        .HasForeignKey("ScooterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locationevent_scooter_scooterid");

                    b.Navigation("Scooter");
                });

            modelBuilder.Entity("ScooterApp.Domain.Model.Trip", b =>
                {
                    b.HasOne("ScooterApp.Domain.Model.Scooter", "Scooter")
                        .WithMany("Trips")
                        .HasForeignKey("ScooterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trip_scooter_scooterid");

                    b.HasOne("ScooterApp.Domain.Model.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trip_user_userid");

                    b.Navigation("Scooter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScooterApp.Domain.Model.Scooter", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("ScooterApp.Domain.Model.User", b =>
                {
                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
